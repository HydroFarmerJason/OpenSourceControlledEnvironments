# === Dockerfile ===
# Multi-stage build for OpenSourceControlledEnvironments
# Supports both x86_64 and ARM (Raspberry Pi)

# Build stage
FROM python:3.9-slim-bullseye AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3-dev \
    libssl-dev \
    libffi-dev \
    cargo \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /build

# Copy requirements
COPY requirements.txt .
COPY requirements.in .

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install --user -r requirements.txt

# Production stage
FROM python:3.9-slim-bullseye

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    python3-smbus \
    i2c-tools \
    libgpiod2 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 farmuser && \
    usermod -a -G dialout,i2c farmuser

# Copy Python dependencies from builder
COPY --from=builder /root/.local /home/farmuser/.local

# Create app directories
WORKDIR /app
RUN mkdir -p /app/data /app/logs /app/config && \
    chown -R farmuser:farmuser /app

# Copy application code
COPY --chown=farmuser:farmuser src/ /app/src/
COPY --chown=farmuser:farmuser scripts/ /app/scripts/
COPY --chown=farmuser:farmuser config/ /app/config/

# Environment variables
ENV PATH=/home/farmuser/.local/bin:$PATH \
    PYTHONPATH=/app/src:$PYTHONPATH \
    PYTHONUNBUFFERED=1 \
    FARM_CONFIG_PATH=/app/config \
    FARM_DATA_PATH=/app/data \
    FARM_LOG_PATH=/app/logs

# Switch to non-root user
USER farmuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Expose ports
EXPOSE 5000 9090

# Default command
CMD ["python", "-m", "farm.api"]

# === docker-compose.yml ===
version: '3.8'

services:
  # Main API service
  farm-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: farm-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://farmuser:farmpass@postgres:5432/farmdb
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - /dev/i2c-1:/dev/i2c-1  # For I2C devices on Raspberry Pi
    devices:
      - /dev/gpiomem:/dev/gpiomem  # For GPIO access on Raspberry Pi
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - farm-network

  # Background worker for scheduled tasks
  farm-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: farm-worker
    restart: unless-stopped
    command: celery -A farm.tasks worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://farmuser:farmpass@postgres:5432/farmdb
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - /dev/i2c-1:/dev/i2c-1
    devices:
      - /dev/gpiomem:/dev/gpiomem
    depends_on:
      - postgres
      - redis
    networks:
      - farm-network

  # Celery beat for scheduled tasks
  farm-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: farm-scheduler
    restart: unless-stopped
    command: celery -A farm.tasks beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://farmuser:farmpass@postgres:5432/farmdb
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - farm-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: farm-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=farmuser
      - POSTGRES_PASSWORD=farmpass
      - POSTGRES_DB=farmdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U farmuser -d farmdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - farm-network

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: farm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - farm-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: farm-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - farm-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: farm-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - farm-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: farm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/usr/share/nginx/html/static
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - farm-api
    networks:
      - farm-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  farm-network:
    driver: bridge

# === docker-compose.dev.yml ===
# Override configuration for development
version: '3.8'

services:
  farm-api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - API_DEBUG=True
      - LOG_LEVEL=DEBUG
    volumes:
      - ./src:/app/src  # Mount source code for hot reload
      - ./tests:/app/tests
    command: python -m flask run --host=0.0.0.0 --port=5000 --reload

  farm-worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: watchmedo auto-restart --directory=./src --pattern=*.py --recursive -- celery -A farm.tasks worker --loglevel=debug
    volumes:
      - ./src:/app/src

# === Dockerfile.dev ===
# Development Dockerfile with additional tools
FROM python:3.9-slim-bullseye

# Install development dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3-dev \
    git \
    vim \
    curl \
    python3-smbus \
    i2c-tools \
    libgpiod2 \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --upgrade pip && \
    pip install watchdog pytest pytest-cov black flake8 mypy ipython

WORKDIR /app

# Copy requirements
COPY requirements.txt .
RUN pip install -r requirements.txt

# Create non-root user
RUN useradd -m -u 1000 farmuser && \
    usermod -a -G dialout,i2c farmuser && \
    chown -R farmuser:farmuser /app

USER farmuser

# Environment variables
ENV PYTHONPATH=/app/src:$PYTHONPATH \
    PYTHONUNBUFFERED=1

# === .dockerignore ===
# Files to exclude from Docker build context
__pycache__
*.pyc
*.pyo
*.pyd
.Python
pip-log.txt
pip-delete-this-directory.txt
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.log
.git
.gitignore
.mypy_cache
.pytest_cache
.hypothesis
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.vscode
.idea
*.swp
*.swo
*~
.DS_Store
node_modules/
dist/
build/
*.egg-info/
.eggs/
data/
logs/
backups/

# === scripts/docker-deploy.sh ===
#!/bin/bash
# Docker deployment script

set -euo pipefail

# Clone the repository
COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Functions
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        error "Docker is not installed. Please install Docker first."
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose is not installed. Please install Docker Compose first."
    fi
    
    # Check environment file
    if [[ ! -f "$ENV_FILE" ]]; then
        warning "Environment file not found. Creating from template..."
        if [[ -f ".env.example" ]]; then
            cp .env.example .env
            log "Created .env file. Please update it with your configuration."
            exit 0
        else
            error ".env.example not found. Cannot create environment file."
        fi
    fi
    
    log "Prerequisites check passed."
}

# Build images
build_images() {
    log "Building Docker images..."
    docker-compose build --no-cache
    log "Images built successfully."
}

# Start services
start_services() {
    log "Starting services..."
    docker-compose up -d
    log "Services started."
}

# Check service health
check_health() {
    log "Checking service health..."
    sleep 10  # Give services time to start
    
    # Check each service
    services=("farm-api" "farm-worker" "postgres" "redis")
    for service in "${services[@]}"; do
        if docker-compose ps | grep -q "$service.*Up"; then
            log " $service is running"
        else
            error "$service is not running properly"
        fi
    done
    
    # Check API endpoint
    if curl -f -s http://localhost:5000/health > /dev/null; then
        log " API is responding"
    else
        warning "API health check failed"
    fi
}

# Run database migrations
run_migrations() {
    log "Running database migrations..."
    docker-compose exec farm-api alembic upgrade head
    log "Migrations completed."
}

# Main deployment process
main() {
    log "Starting OpenSource Controlled Environments deployment..."
    
    check_prerequisites
    
    case "${1:-deploy}" in
        build)
            build_images
            ;;
        start)
            start_services
            check_health
            ;;
        stop)
            log "Stopping services..."
            docker-compose down
            log "Services stopped."
            ;;
        restart)
            log "Restarting services..."
            docker-compose restart
            check_health
            ;;
        logs)
            docker-compose logs -f "${2:-}"
            ;;
        deploy)
            build_images
            start_services
            run_migrations
            check_health
            log "Deployment completed successfully!"
            log "Access the application at: http://localhost:5000"
            log "Access Grafana at: http://localhost:3000 (admin/admin)"
            ;;
        *)
            echo "Usage: $0 {build|start|stop|restart|logs|deploy}"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"